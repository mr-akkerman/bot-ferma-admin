"""
–õ–æ–≥–∏–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
"""
from models import Profile
import traceback


def get_dashboard_data():
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
    
    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å–æ –≤—Å–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    """
    print("üìä –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print("   –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ñ–∏–ª–µ–π...")
        total_count = Profile.get_total_count() or 0
        print(f"   ‚úÖ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {total_count}")
        
        print("   –ü–æ–ª—É—á–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç –ø—Ä–æ—Ñ–∏–ª–µ–π...")
        avg_age_days = Profile.get_average_age_days() or 0
        print(f"   ‚úÖ –°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç: {avg_age_days}")
        
        print("   –ü–æ–ª—É—á–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–º–µ–Ω–æ–≤...")
        avg_domain_count = Profile.get_average_domain_count() or 0
        print(f"   ‚úÖ –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–º–µ–Ω–æ–≤: {avg_domain_count}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≥—Ä—É–ø–ø–∞–º
        print("   –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≥—Ä—É–ø–ø–∞–º...")
        groups_stats = Profile.get_groups_stats() or []
        print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø: {len(groups_stats)}")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø
        formatted_groups = []
        for group_data in groups_stats:
            party, count, avg_age, avg_domains = group_data
            formatted_group = {
                'party': party or 'Unknown',
                'count': count or 0,
                'avg_age_days': round(float(avg_age or 0), 2),
                'avg_domains': round(float(avg_domains or 0), 2)
            }
            formatted_groups.append(formatted_group)
            print(f"      - {formatted_group['party']}: {formatted_group['count']} –ø—Ä–æ—Ñ–∏–ª–µ–π")
        
        result = {
            'total_count': total_count,
            'avg_age_days': round(float(avg_age_days), 2) if avg_age_days else 0.0,
            'avg_domain_count': round(float(avg_domain_count), 2) if avg_domain_count else 0.0,
            'groups_stats': formatted_groups
        }
        
        print(f"üìä ‚úÖ –î–∞–Ω–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥–∞ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ: {result}")
        return result
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞: {e}")
        print(f"‚ùå Traceback: {traceback.format_exc()}")
        
        # –í —Å–ª—É—á–∞–µ –ª—é–±–æ–π –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        return {
            'total_count': 0,
            'avg_age_days': 0.0,
            'avg_domain_count': 0.0,
            'groups_stats': []
        }
