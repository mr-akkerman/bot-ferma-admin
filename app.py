import os
from flask import Flask, render_template, request, redirect, url_for, flash
from werkzeug.security import generate_password_hash
from models import db, User
from auth import login_user, logout_user, is_authenticated
from dashboard import get_dashboard_data
from admin_management import get_admins_list, add_admin, remove_admin
from config import get_config, validate_config

# –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
try:
    validate_config()
except ValueError as e:
    print(f"‚ùå Configuration Error: {e}")
    exit(1)

# –°–æ–∑–¥–∞–Ω–∏–µ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Flask(__name__, instance_relative_config=True)

# –ü–æ–ª—É—á–∞–µ–º –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
config_class = get_config()
config_class.init_app(app)

print(f"üîß Using configuration: {config_class.__name__}")
print(f"üîí Admin DB: {app.config.get('_ADMIN_DB_URI', 'Not configured')}")
print(f"üìä Profiles DB: {app.config.get('_PROFILES_DB_URI', 'Not configured')}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SQLAlchemy
db.init_app(app)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
def require_auth():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return is_authenticated()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ before_request –¥–ª—è –∑–∞—â–∏—Ç—ã —Ä–æ—É—Ç–æ–≤
@app.before_request
def check_auth():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –∑–∞–ø—Ä–æ—Å–æ–º"""
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è /login, /logout –∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
    if request.endpoint in ['login', 'logout', 'static']:
        return
    
    # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ä–æ—É—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    if not require_auth():
        return redirect(url_for('login'))

# –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PostgreSQL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞"""
    with app.app_context():
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–π PostgreSQL –ë–î
            db.create_all(bind_key='admin')
            print("‚úÖ Admin database tables created/verified")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
            admin_exists = User.query.filter_by(username='admin').first()
            
            if not admin_exists:
                # –°–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞ —Å —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º
                password_hash = generate_password_hash('admin')
                default_admin = User(
                    username='admin',
                    password_hash=password_hash
                )
                db.session.add(default_admin)
                db.session.commit()
                print("‚úÖ –°–æ–∑–¥–∞–Ω –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –∞–¥–º–∏–Ω: admin/admin")
                print("‚ö†Ô∏è  –í–ê–ñ–ù–û: –ò–∑–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–∞!")
            else:
                print("‚ÑπÔ∏è  –î–µ—Ñ–æ–ª—Ç–Ω—ã–π –∞–¥–º–∏–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤: {e}")
            print("üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL –¥–ª—è –∞–¥–º–∏–Ω–æ–≤")
            raise

# –†–æ—É—Ç—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ dashboard –µ—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –∏–Ω–∞—á–µ –Ω–∞ login"""
    if is_authenticated():
        return redirect(url_for('dashboard'))
    return redirect(url_for('login'))


@app.route('/login', methods=['GET', 'POST'])
def login():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É"""
    if request.method == 'GET':
        return render_template('login.html')
    
    # POST –∑–∞–ø—Ä–æ—Å - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞
    username = request.form.get('username')
    password = request.form.get('password')
    
    if login_user(username, password):
        return redirect(url_for('dashboard'))
    
    return render_template('login.html')


@app.route('/logout', methods=['POST'])
def logout():
    """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
    logout_user()
    return redirect(url_for('login'))


@app.route('/dashboard')
def dashboard():
    """–î–∞—à–±–æ—Ä–¥ –∞–¥–º–∏–Ω–∫–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
        dashboard_data = get_dashboard_data()
        return render_template('dashboard.html', data=dashboard_data)
    except Exception as e:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL –ø—Ä–æ—Ñ–∏–ª–µ–π
        error_message = "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ PROFILES_DB_*"
        print(f"‚ùå Dashboard error: {e}")
        return render_template('dashboard.html', error=error_message)


@app.route('/admins')
def admins():
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏"""
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤
    result = get_admins_list()
    if result['success']:
        return render_template('admins.html', admins=result['admins'])
    else:
        return render_template('admins.html', error=result['error'])


@app.route('/admins/add', methods=['POST'])
def add_admin_route():
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞"""
    username = request.form.get('username')
    password = request.form.get('password')
    
    if not username or not password:
        return render_template('admins.html', error='–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã')
    
    result = add_admin(username, password)
    if result['success']:
        return redirect(url_for('admins'))
    else:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –æ—à–∏–±–∫–æ–π
        admins_result = get_admins_list()
        admins = admins_result['admins'] if admins_result['success'] else []
        return render_template('admins.html', error=result['error'], admins=admins)


@app.route('/admins/delete/<int:user_id>', methods=['POST'])
def delete_admin_route(user_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞"""
    result = remove_admin(user_id)
    if result['success']:
        return redirect(url_for('admins'))
    else:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –æ—à–∏–±–∫–æ–π
        admins_result = get_admins_list()
        admins = admins_result['admins'] if admins_result['success'] else []
        return render_template('admins.html', error=result['error'], admins=admins)


@app.route('/tools')
def tools():
    """–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"""
    return render_template('tools.html')

if __name__ == '__main__':
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    init_db()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –æ—Ç Railway –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º 8000 –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    port = int(os.environ.get('PORT', 8000))
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    is_production = os.environ.get('RAILWAY_ENVIRONMENT_NAME') is not None
    
    print(f"üöÄ Starting app on port {port}")
    print(f"üîß Environment: {'Production (Railway)' if is_production else 'Development'}")
    
    app.run(
        host='0.0.0.0',  # –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –¥–ª—è Railway!
        port=port,       # –ü–æ—Ä—Ç –æ—Ç Railway
        debug=not is_production  # debug=False –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
    )
